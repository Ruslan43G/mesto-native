{"version":3,"sources":["components/Header.js","utils/Api.js","components/Card.js","components/Main.js","components/Footer.js","components/PopupWithForm.js","components/ImagePopup.js","components/App.js","serviceWorker.js","index.js","images/header/Vector.svg"],"names":["Header","className","src","logo","alt","api","options","this","_url","baseUrl","_headers","headers","formData","fetch","method","body","JSON","stringify","name","link","then","res","ok","json","Promise","reject","status","statusText","newUserData","about","job","avatar","cardId","authorization","Card","props","data-owner","onClick","card","onDeleteClick","type","likes","length","Main","React","useState","userName","setUserName","userDescription","setUserDescription","userAvatar","setUserAvatar","cards","setCards","useEffect","all","getUserInfo","getInitialCards","userData","initialCards","catch","err","console","log","onEditAvatar","onEditProfile","onAddPlace","map","item","key","_id","onCardClick","Footer","PopupWithForm","isOpen","id","noValidate","onClose","title","children","handler","aria-label","buttonText","ImagePopup","App","profileIsOpen","setProfileIsOpen","avatarIsOpen","setAvatarIsOpen","addCardIsOpen","setAddCardIsOpen","selectedCard","setSelectedCard","deleteIsOpen","setDeleteIsOpen","closeAllPopups","handleEditAvatarClick","handleEditProfileClick","handleAddPlaceClick","placeholder","minLength","maxLength","pattern","required","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.218f2c82.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../images/header/Vector.svg'\r\n//компонент хидер\r\nexport default function Header () {\r\n    return (\r\n        <header className=\"header\">\r\n           <img className=\"header__logo\" src={logo} alt=\"логотип сервиса\"/>\r\n       </header>\r\n    )\r\n}","\r\nclass Api {\r\n    constructor(options) {\r\n        this._url = options.baseUrl;\r\n        this._headers = options.headers;\r\n    }\r\n\r\n    postNewCard (formData) {\r\n        return fetch (`${this._url}/cards`, {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: formData.name,\r\n                link: formData.link\r\n            })    \r\n            }\r\n        )\r\n        .then((res) => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(`${res.status} ${res.statusText}`);\r\n        });\r\n    }\r\n\r\n    getInitialCards() {\r\n        return fetch(`${this._url}/cards`, {\r\n            headers: this._headers\r\n        })\r\n        .then((res) => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(`${res.status} ${res.statusText}`);\r\n        });  \r\n    }\r\n\r\n    getUserInfo() {\r\n        return fetch(`${this._url}/users/me`, {\r\n            headers: this._headers\r\n            })\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n            });   \r\n\r\n    }\r\n\r\n    setUserInfo(newUserData) {\r\n        return fetch (`${this._url}/users/me`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: newUserData.name,\r\n                about: newUserData.job\r\n            })    \r\n            }\r\n        )\r\n        .then((res) => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(`${res.status} ${res.statusText}`);\r\n        })\r\n    }\r\n\r\n    setUserAvatar (newUserData) {\r\n        return fetch (`${this._url}/users/me/avatar`, {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: newUserData.avatar\r\n            })    \r\n            }\r\n        )\r\n        .then((res) => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n        })\r\n    }\r\n\r\n    putLike(cardId) {\r\n        \r\n        return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n            method: 'PUT',\r\n            headers: this._headers\r\n            })\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n            });\r\n    }\r\n\r\n    deleteLike(cardId) {\r\n        return fetch(`${this._url}/cards/likes/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n            })\r\n            .then((res) => {\r\n                if (res.ok) {\r\n                    return res.json();\r\n                }\r\n                return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n            });\r\n    }\r\n\r\n    deleteCard(cardId) {\r\n        return fetch(`${this._url}/cards/${cardId}`, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n        })\r\n        .then((res) => {\r\n            if (res.ok) {\r\n                return res.json();\r\n            }\r\n            return Promise.reject(`Ошибка: ${res.status} ${res.statusText}`);\r\n        });\r\n    }\r\n\r\n}\r\n\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-12',\r\n    headers: {\r\n      authorization: '627f7bad-0dfb-4267-9517-9e8391316bf9',\r\n      'Content-Type': 'application/json'\r\n    }\r\n})\r\n\r\nexport default api;","import React from 'react';\r\n//компонент карточки\r\nexport default function Card (props) {                                                                       // создаём класс для карточки\r\n    //хэндлер клика по картинке для открытия попапа\r\n    function handleClick() {\r\n        props.onClick(props.card)\r\n    }\r\n    // отрисовка компонента\r\n    return (\r\n        <div className=\"elements__item\" data-owner=\"\">\r\n            <img className=\"elements__img\" onClick={handleClick} src={props.card.link} alt={props.card.name} />\r\n            <button className=\"elements__trash\" onClick={props.onDeleteClick} type=\"button\"></button>\r\n            <h3 className=\"elements__title\">{props.card.name}</h3>\r\n            <button className=\"elements__like\" type=\"button\"></button>\r\n            <p className=\"elements__like-counter\">{props.card.likes.length}</p>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport api from '../utils/Api.js';\r\nimport Card from './Card.js';\r\n//основной компонент. Содержит секцию с профилем и карточками.\r\nexport default function Main (props) {\r\n    //переменные состояния\r\n    const [userName, setUserName] = React.useState(''); // имя пользователя\r\n    const [userDescription, setUserDescription] = React.useState(''); //описание пользователя\r\n    const [userAvatar, setUserAvatar] = React.useState(''); // Аватар\r\n    const [cards, setCards] = React.useState([]); //массив картчоек\r\n    // хук при монтировании компонента\r\n    React.useEffect(() => {\r\n        //ждём ответа от 2х запросов api (инфа о пользователе и массив карточек)\r\n        Promise.all([api.getUserInfo(), api.getInitialCards()])\r\n            .then(([userData, initialCards]) => {\r\n                setUserName(userData.name);                 //устанавливаем имя\r\n                setUserDescription(userData.about);         //устанавливаем описание\r\n                setUserAvatar(userData.avatar);             //устанавливаем аватар\r\n                setCards([...initialCards]);                //записываем массив карточек в стейт переменную\r\n            })\r\n            .catch(err => console.log(err));               //вывод в консоль на случай ошибки\r\n            \r\n    }, [])\r\n    //Отрисовка компонента\r\n    return (\r\n        <> \r\n            <section className=\"profile\">\r\n                <img className=\"profile__img\" src={userAvatar} alt=\"автар пользователя\"/>\r\n                <div className=\"profile__img-hover\" onClick={props.onEditAvatar}></div>\r\n                <div className=\"profile__info\">\r\n                    <h1 className=\"profile__name\">{userName}</h1>\r\n                    <button className=\"profile__edit-btn\" onClick={props.onEditProfile} type=\"button\"></button>\r\n                    <p className=\"profile__about\">{userDescription}</p>\r\n                </div>\r\n                <button className=\"profile__add-btn\" onClick={props.onAddPlace} type=\"button\"></button>\r\n            </section>\r\n            <main className=\"elements\">\r\n                {cards.map(item => <Card key={item._id} card={item} onDeleteClick={props.onDeleteClick} onClick={props.onCardClick} />)}\r\n            </main>\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\n//компонент футер\r\nexport default function Footer () {\r\n    return (\r\n        <footer className=\"footer\">\r\n           <p className=\"footer__copyright\">&copy; 2020 Руслан Тихомиров</p>\r\n       </footer>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function PopupWithForm (props) {\r\n    return (\r\n        <section className={props.isOpen ? `popup ${props.name} popup_opened` : `popup ${props.name}`}>\r\n            <form className='popup__container' id=\"profile-form\" noValidate>\r\n                <button className=\"popup__icon-close\" onClick={props.onClose} type=\"button\"></button>\r\n                <h3 className=\"popup__title popup__title_form\">{props.title}</h3>\r\n                {props.children}\r\n                <button className=\"popup__button popup__button_form\" id=\"profile-save-button\" onClick={props.handler} type=\"submit\" aria-label=\"Сохранить\">{props.buttonText}</button>\r\n            </form>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\n// компонент попапа с картинкой\r\nexport default function ImagePopup(props) {\r\n    return (\r\n        <section className={props.card.isOpen ? `popup popup_image` : `popup popup_image popup_opened`}>\r\n           <div className=\"popup__image-container\">\r\n                <button className=\"popup__icon-close popup__icon-close_image\" id=\"close-img-popup\" onClick={props.onClose} type=\"button\"></button>\r\n                <img className=\"popup__image\" src={props.card.link} alt={props.card.name} />\r\n                <p className=\"popup__img-text\">{props.card.name}</p>\r\n            </div>\r\n        </section>\r\n    )\r\n}","import React from 'react';\r\nimport Header from './Header.js';\r\nimport Main from './Main.js';\r\nimport Footer from './Footer.js';\r\nimport PopupWithForm from './PopupWithForm.js';\r\nimport ImagePopup from './ImagePopup.js';\r\n\r\nfunction App() {\r\n  // [переменные состояния]\r\n  const [profileIsOpen, setProfileIsOpen] = React.useState(false); // попап профиля\r\n  const [avatarIsOpen, setAvatarIsOpen] = React.useState(false); // попап авата\r\n  const [addCardIsOpen, setAddCardIsOpen] = React.useState(false); // попап добавления карточки\r\n  const [selectedCard, setSelectedCard] = React.useState({        // попап картинки\r\n    isOpen: true,\r\n    link: '',\r\n    name: ''\r\n  });\r\n  const [deleteIsOpen, setDeleteIsOpen] = React.useState(false);\r\n  // функция закрытия всех попапов. Переводит переменные состояния в необходимые значения\r\n  function closeAllPopups() {\r\n    setProfileIsOpen(false);\r\n    setAvatarIsOpen(false);\r\n    setAddCardIsOpen(false);\r\n    setDeleteIsOpen(false);\r\n    setSelectedCard({\r\n      ...selectedCard,\r\n      isOpen: true,\r\n    });\r\n  }\r\n // Хэндлеры для открытия попапов\r\n  function handleEditAvatarClick () {\r\n    setAvatarIsOpen(true);\r\n  }\r\n  function handleEditProfileClick () {\r\n    setProfileIsOpen(true);\r\n  }\r\n  function handleAddPlaceClick () {\r\n    setAddCardIsOpen(true);\r\n  }\r\n  function handleCardClick (props) {\r\n    setSelectedCard({\r\n      isOpen: false,\r\n      link: props.link,\r\n      name: props.name\r\n    });\r\n  }\r\n  function handleDeleteClick() {\r\n    setDeleteIsOpen(true);\r\n  }\r\n  // рендер основной страницы\r\n  return (\r\n    <div className=\"page\">\r\n      <Header />\r\n      <Main \r\n      onEditAvatar={handleEditAvatarClick} \r\n      onEditProfile={handleEditProfileClick} \r\n      onAddPlace={handleAddPlaceClick}\r\n      onCardClick={handleCardClick}\r\n      onDeleteClick={handleDeleteClick}\r\n      />\r\n      <Footer />\r\n      <PopupWithForm name='popup_profile' buttonText='Сохранить' handler={handleEditProfileClick} title='Редактировать профиль' children={\r\n                    <>\r\n                        <input className=\"popup__input\" id=\"profile-input-name\" name=\"name\" type=\"text\" placeholder=\"Имя\" minLength=\"2\" maxLength=\"40\" pattern=\"^[А-Яа-яЁёA-Za-z\\s-]+$\" required />\r\n                        <span className=\"popup__error\" id=\"profile-input-name-error\"></span>\r\n                        <input className=\"popup__input\" id=\"profile-input-about\" name=\"job\" type=\"text\" placeholder=\"О себе\" minLength=\"2\" maxLength=\"200\" required />\r\n                        <span className=\"popup__error\" id=\"profile-input-about-error\"></span>\r\n                    </>\r\n                    } isOpen={profileIsOpen}\r\n                    onClose={closeAllPopups}/>\r\n      <PopupWithForm name='popup_card' buttonText='Создать' handler={handleAddPlaceClick} title='Новое место' children={\r\n                <>\r\n                    <input className=\"popup__input\" id=\"card-name-input\" name=\"name\" type=\"text\" placeholder=\"Название\" minLength=\"1\" maxLength=\"30\" required />\r\n                    <span className=\"popup__error\" id=\"card-name-input-error\"></span>\r\n                    <input className=\"popup__input\" id=\"card-url-input\" name=\"link\" type=\"url\" placeholder=\"Ссылка на картинку\"  required />\r\n                    <span className=\"popup__error\" id=\"card-url-input-error\"></span>\r\n                </>\r\n            } isOpen={addCardIsOpen}\r\n            onClose={closeAllPopups}/>\r\n      <PopupWithForm name='popup_avatar' buttonText='Сохранить' handler={handleEditAvatarClick} title='Обновить аватар' children={\r\n                <>\r\n                    <input className=\"popup__input\" id=\"avatar-url-input\" name=\"avatar\" type=\"url\" placeholder=\"Введите url\" required />\r\n                    <span className=\"popup__error\" id=\"avatar-url-input-error\"></span>\r\n                </>\r\n            } isOpen={avatarIsOpen}\r\n            onClose={closeAllPopups}/>\r\n      <ImagePopup card={selectedCard} onClose={closeAllPopups}/>\r\n      <PopupWithForm name='popup_delete' buttonText='Да' title='Вы уверены?' isOpen={deleteIsOpen} onClose={closeAllPopups}/>\r\n    </div> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App.js';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/Vector.855a8c98.svg\";"],"sourceRoot":""}